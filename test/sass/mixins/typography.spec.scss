@import "../test";
@import "../../../source/css/sass/mixins/typography";

@include describe("@mixin font-size") {

  @include it("sets the font size using the map's value when the argument is a map key") {

    @include assert() {

      $fixture: (
        some-size: 16px,
      );

      @include output {
        @include font-size(some-size, $fixture);
      }

      @include expect {
        font-size: 16px;
        font-size: 1rem;
        font-size: var(--font-some-size);
      }

    }

  }
}

@include it("sets the font size using the argument directly when it's not a map key") {

  @include assert() {

    $fixture: (
      some-size: 16px,
    );

    @include output {
      @include font-size(32px, $fixture);
    }

    @include expect {
      font-size: 32px;
      font-size: 2rem;
    }

  }

}

@include it("can accommodate rem numbers") {

  @include assert() {

    $fixture: (
        some-size: 1rem,
    );

    @include output {
      @include font-size(2rem, $fixture);
    }

    @include expect {
      font-size: 32px;
      font-size: 2rem;
    }

  }

}

@include it("can accommodate px numbers") {

  @include assert() {

    $fixture: (
        some-size: 16px,
    );

    @include output {
      @include font-size(32px, $fixture);
    }

    @include expect {
      font-size: 32px;
      font-size: 2rem;
    }

  }

}
@include it("errors if the argument does not resolve to a number") {

  @include assert() {

    $fixture: (
      some-key: (one, two, three, px),
    );

    @include output {
      @include font-size(some-key, $fixture);
    }

    @include expect {
      _error: "Font size must be set using a 'px'-suffixed number or a 'rem'-suffixed number.";
    }

  }

}

@include it("errors if the argument does not resolve to a 'px'-suffixed number") {

  @include assert() {

    $fixture: (
      some-key: a-string-i-do-not-have-a-px-suffix-but-i-do-end-in-rem,
    );

    @include output {
      @include font-size(some-key, $fixture);
    }

    @include expect {
      _error: "Font size must be set using a 'px'-suffixed number or a 'rem'-suffixed number.ยง";
    }

  }

}

@include describe("@mixin font-family") {

  @include it("sets the font family using the map's value when the argument is a map key") {

    @include assert() {

      $fixture: (
        some-font-family: '"Noto Sans", Arial, Helvetica, sans-serif',
      );

      @include output {
        @include font-family(some-font-family, $fixture);
      }

      @include expect {
        font-family: "Noto Sans", Arial, Helvetica, sans-serif;
        font-family: var(--font-some-font-family);
      }

    }

  }

  @include it("errors when the argument is not a map key") {

    @include assert() {

      $fixture: (one: two);

      @include output {
        @include font-family(non-existent-key, $fixture);
      }

      @include expect {
        _error: "Font family key `non-existent-key` not found in map";
      }

    }

  }

}
